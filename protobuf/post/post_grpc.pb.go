// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: proto/post.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PostService_CreateTopic_FullMethodName             = "/post.PostService/CreateTopic"
	PostService_GetAllTopicsAdmin_FullMethodName       = "/post.PostService/GetAllTopicsAdmin"
	PostService_UpdateTopic_FullMethodName             = "/post.PostService/UpdateTopic"
	PostService_DeleteTopic_FullMethodName             = "/post.PostService/DeleteTopic"
	PostService_DeleteTopics_FullMethodName            = "/post.PostService/DeleteTopics"
	PostService_PermanentlyDeleteTopic_FullMethodName  = "/post.PostService/PermanentlyDeleteTopic"
	PostService_PermanentlyDeleteTopics_FullMethodName = "/post.PostService/PermanentlyDeleteTopics"
	PostService_RestoreTopic_FullMethodName            = "/post.PostService/RestoreTopic"
	PostService_RestoreTopics_FullMethodName           = "/post.PostService/RestoreTopics"
	PostService_CreatePost_FullMethodName              = "/post.PostService/CreatePost"
	PostService_GetDeletedTopics_FullMethodName        = "/post.PostService/GetDeletedTopics"
	PostService_GetAllTopics_FullMethodName            = "/post.PostService/GetAllTopics"
	PostService_GetAllPostsAdmin_FullMethodName        = "/post.PostService/GetAllPostsAdmin"
	PostService_GetPostById_FullMethodName             = "/post.PostService/GetPostById"
	PostService_UpdatePost_FullMethodName              = "/post.PostService/UpdatePost"
	PostService_DeletePost_FullMethodName              = "/post.PostService/DeletePost"
	PostService_DeletePosts_FullMethodName             = "/post.PostService/DeletePosts"
	PostService_RestorePost_FullMethodName             = "/post.PostService/RestorePost"
	PostService_RestorePosts_FullMethodName            = "/post.PostService/RestorePosts"
	PostService_PermanentlyDeletePost_FullMethodName   = "/post.PostService/PermanentlyDeletePost"
	PostService_PermanentlyDeletePosts_FullMethodName  = "/post.PostService/PermanentlyDeletePosts"
	PostService_GetDeletedPosts_FullMethodName         = "/post.PostService/GetDeletedPosts"
	PostService_GetDeletedPostById_FullMethodName      = "/post.PostService/GetDeletedPostById"
	PostService_GetPostContentById_FullMethodName      = "/post.PostService/GetPostContentById"
)

// PostServiceClient is the client API for PostService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PostServiceClient interface {
	CreateTopic(ctx context.Context, in *CreateTopicRequest, opts ...grpc.CallOption) (*CreatedResponse, error)
	GetAllTopicsAdmin(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*TopicsAdminResponse, error)
	UpdateTopic(ctx context.Context, in *UpdateTopicRequest, opts ...grpc.CallOption) (*UpdatedResponse, error)
	DeleteTopic(ctx context.Context, in *DeleteOneRequest, opts ...grpc.CallOption) (*DeletedResponse, error)
	DeleteTopics(ctx context.Context, in *DeleteManyRequest, opts ...grpc.CallOption) (*DeletedResponse, error)
	PermanentlyDeleteTopic(ctx context.Context, in *PermanentlyDeleteOneRequest, opts ...grpc.CallOption) (*DeletedResponse, error)
	PermanentlyDeleteTopics(ctx context.Context, in *PermanentlyDeleteManyRequest, opts ...grpc.CallOption) (*DeletedResponse, error)
	RestoreTopic(ctx context.Context, in *RestoreOneRequest, opts ...grpc.CallOption) (*RestoredResponse, error)
	RestoreTopics(ctx context.Context, in *RestoreManyRequest, opts ...grpc.CallOption) (*RestoredResponse, error)
	CreatePost(ctx context.Context, in *CreatePostRequest, opts ...grpc.CallOption) (*CreatedResponse, error)
	GetDeletedTopics(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*TopicsAdminResponse, error)
	GetAllTopics(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*TopicsResponse, error)
	GetAllPostsAdmin(ctx context.Context, in *GetAllPostsAdminRequest, opts ...grpc.CallOption) (*PostsAdminResponse, error)
	GetPostById(ctx context.Context, in *GetOneRequest, opts ...grpc.CallOption) (*PostAdminDetailsResponse, error)
	UpdatePost(ctx context.Context, in *UpdatePostRequest, opts ...grpc.CallOption) (*PostAdminDetailsResponse, error)
	DeletePost(ctx context.Context, in *DeleteOneRequest, opts ...grpc.CallOption) (*DeletedResponse, error)
	DeletePosts(ctx context.Context, in *DeleteManyRequest, opts ...grpc.CallOption) (*DeletedResponse, error)
	RestorePost(ctx context.Context, in *RestoreOneRequest, opts ...grpc.CallOption) (*RestoredResponse, error)
	RestorePosts(ctx context.Context, in *RestoreManyRequest, opts ...grpc.CallOption) (*RestoredResponse, error)
	PermanentlyDeletePost(ctx context.Context, in *PermanentlyDeleteOneRequest, opts ...grpc.CallOption) (*DeletedResponse, error)
	PermanentlyDeletePosts(ctx context.Context, in *PermanentlyDeleteManyRequest, opts ...grpc.CallOption) (*DeletedResponse, error)
	GetDeletedPosts(ctx context.Context, in *GetAllPostsAdminRequest, opts ...grpc.CallOption) (*PostsAdminResponse, error)
	GetDeletedPostById(ctx context.Context, in *GetOneRequest, opts ...grpc.CallOption) (*PostAdminDetailsResponse, error)
	GetPostContentById(ctx context.Context, in *GetOneRequest, opts ...grpc.CallOption) (*PostContentResponse, error)
}

type postServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPostServiceClient(cc grpc.ClientConnInterface) PostServiceClient {
	return &postServiceClient{cc}
}

func (c *postServiceClient) CreateTopic(ctx context.Context, in *CreateTopicRequest, opts ...grpc.CallOption) (*CreatedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatedResponse)
	err := c.cc.Invoke(ctx, PostService_CreateTopic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) GetAllTopicsAdmin(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*TopicsAdminResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TopicsAdminResponse)
	err := c.cc.Invoke(ctx, PostService_GetAllTopicsAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) UpdateTopic(ctx context.Context, in *UpdateTopicRequest, opts ...grpc.CallOption) (*UpdatedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatedResponse)
	err := c.cc.Invoke(ctx, PostService_UpdateTopic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) DeleteTopic(ctx context.Context, in *DeleteOneRequest, opts ...grpc.CallOption) (*DeletedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletedResponse)
	err := c.cc.Invoke(ctx, PostService_DeleteTopic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) DeleteTopics(ctx context.Context, in *DeleteManyRequest, opts ...grpc.CallOption) (*DeletedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletedResponse)
	err := c.cc.Invoke(ctx, PostService_DeleteTopics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) PermanentlyDeleteTopic(ctx context.Context, in *PermanentlyDeleteOneRequest, opts ...grpc.CallOption) (*DeletedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletedResponse)
	err := c.cc.Invoke(ctx, PostService_PermanentlyDeleteTopic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) PermanentlyDeleteTopics(ctx context.Context, in *PermanentlyDeleteManyRequest, opts ...grpc.CallOption) (*DeletedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletedResponse)
	err := c.cc.Invoke(ctx, PostService_PermanentlyDeleteTopics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) RestoreTopic(ctx context.Context, in *RestoreOneRequest, opts ...grpc.CallOption) (*RestoredResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RestoredResponse)
	err := c.cc.Invoke(ctx, PostService_RestoreTopic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) RestoreTopics(ctx context.Context, in *RestoreManyRequest, opts ...grpc.CallOption) (*RestoredResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RestoredResponse)
	err := c.cc.Invoke(ctx, PostService_RestoreTopics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) CreatePost(ctx context.Context, in *CreatePostRequest, opts ...grpc.CallOption) (*CreatedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatedResponse)
	err := c.cc.Invoke(ctx, PostService_CreatePost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) GetDeletedTopics(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*TopicsAdminResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TopicsAdminResponse)
	err := c.cc.Invoke(ctx, PostService_GetDeletedTopics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) GetAllTopics(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*TopicsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TopicsResponse)
	err := c.cc.Invoke(ctx, PostService_GetAllTopics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) GetAllPostsAdmin(ctx context.Context, in *GetAllPostsAdminRequest, opts ...grpc.CallOption) (*PostsAdminResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostsAdminResponse)
	err := c.cc.Invoke(ctx, PostService_GetAllPostsAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) GetPostById(ctx context.Context, in *GetOneRequest, opts ...grpc.CallOption) (*PostAdminDetailsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostAdminDetailsResponse)
	err := c.cc.Invoke(ctx, PostService_GetPostById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) UpdatePost(ctx context.Context, in *UpdatePostRequest, opts ...grpc.CallOption) (*PostAdminDetailsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostAdminDetailsResponse)
	err := c.cc.Invoke(ctx, PostService_UpdatePost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) DeletePost(ctx context.Context, in *DeleteOneRequest, opts ...grpc.CallOption) (*DeletedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletedResponse)
	err := c.cc.Invoke(ctx, PostService_DeletePost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) DeletePosts(ctx context.Context, in *DeleteManyRequest, opts ...grpc.CallOption) (*DeletedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletedResponse)
	err := c.cc.Invoke(ctx, PostService_DeletePosts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) RestorePost(ctx context.Context, in *RestoreOneRequest, opts ...grpc.CallOption) (*RestoredResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RestoredResponse)
	err := c.cc.Invoke(ctx, PostService_RestorePost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) RestorePosts(ctx context.Context, in *RestoreManyRequest, opts ...grpc.CallOption) (*RestoredResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RestoredResponse)
	err := c.cc.Invoke(ctx, PostService_RestorePosts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) PermanentlyDeletePost(ctx context.Context, in *PermanentlyDeleteOneRequest, opts ...grpc.CallOption) (*DeletedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletedResponse)
	err := c.cc.Invoke(ctx, PostService_PermanentlyDeletePost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) PermanentlyDeletePosts(ctx context.Context, in *PermanentlyDeleteManyRequest, opts ...grpc.CallOption) (*DeletedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletedResponse)
	err := c.cc.Invoke(ctx, PostService_PermanentlyDeletePosts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) GetDeletedPosts(ctx context.Context, in *GetAllPostsAdminRequest, opts ...grpc.CallOption) (*PostsAdminResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostsAdminResponse)
	err := c.cc.Invoke(ctx, PostService_GetDeletedPosts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) GetDeletedPostById(ctx context.Context, in *GetOneRequest, opts ...grpc.CallOption) (*PostAdminDetailsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostAdminDetailsResponse)
	err := c.cc.Invoke(ctx, PostService_GetDeletedPostById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) GetPostContentById(ctx context.Context, in *GetOneRequest, opts ...grpc.CallOption) (*PostContentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostContentResponse)
	err := c.cc.Invoke(ctx, PostService_GetPostContentById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PostServiceServer is the server API for PostService service.
// All implementations must embed UnimplementedPostServiceServer
// for forward compatibility.
type PostServiceServer interface {
	CreateTopic(context.Context, *CreateTopicRequest) (*CreatedResponse, error)
	GetAllTopicsAdmin(context.Context, *GetAllRequest) (*TopicsAdminResponse, error)
	UpdateTopic(context.Context, *UpdateTopicRequest) (*UpdatedResponse, error)
	DeleteTopic(context.Context, *DeleteOneRequest) (*DeletedResponse, error)
	DeleteTopics(context.Context, *DeleteManyRequest) (*DeletedResponse, error)
	PermanentlyDeleteTopic(context.Context, *PermanentlyDeleteOneRequest) (*DeletedResponse, error)
	PermanentlyDeleteTopics(context.Context, *PermanentlyDeleteManyRequest) (*DeletedResponse, error)
	RestoreTopic(context.Context, *RestoreOneRequest) (*RestoredResponse, error)
	RestoreTopics(context.Context, *RestoreManyRequest) (*RestoredResponse, error)
	CreatePost(context.Context, *CreatePostRequest) (*CreatedResponse, error)
	GetDeletedTopics(context.Context, *GetAllRequest) (*TopicsAdminResponse, error)
	GetAllTopics(context.Context, *GetAllRequest) (*TopicsResponse, error)
	GetAllPostsAdmin(context.Context, *GetAllPostsAdminRequest) (*PostsAdminResponse, error)
	GetPostById(context.Context, *GetOneRequest) (*PostAdminDetailsResponse, error)
	UpdatePost(context.Context, *UpdatePostRequest) (*PostAdminDetailsResponse, error)
	DeletePost(context.Context, *DeleteOneRequest) (*DeletedResponse, error)
	DeletePosts(context.Context, *DeleteManyRequest) (*DeletedResponse, error)
	RestorePost(context.Context, *RestoreOneRequest) (*RestoredResponse, error)
	RestorePosts(context.Context, *RestoreManyRequest) (*RestoredResponse, error)
	PermanentlyDeletePost(context.Context, *PermanentlyDeleteOneRequest) (*DeletedResponse, error)
	PermanentlyDeletePosts(context.Context, *PermanentlyDeleteManyRequest) (*DeletedResponse, error)
	GetDeletedPosts(context.Context, *GetAllPostsAdminRequest) (*PostsAdminResponse, error)
	GetDeletedPostById(context.Context, *GetOneRequest) (*PostAdminDetailsResponse, error)
	GetPostContentById(context.Context, *GetOneRequest) (*PostContentResponse, error)
	mustEmbedUnimplementedPostServiceServer()
}

// UnimplementedPostServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPostServiceServer struct{}

func (UnimplementedPostServiceServer) CreateTopic(context.Context, *CreateTopicRequest) (*CreatedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTopic not implemented")
}
func (UnimplementedPostServiceServer) GetAllTopicsAdmin(context.Context, *GetAllRequest) (*TopicsAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTopicsAdmin not implemented")
}
func (UnimplementedPostServiceServer) UpdateTopic(context.Context, *UpdateTopicRequest) (*UpdatedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTopic not implemented")
}
func (UnimplementedPostServiceServer) DeleteTopic(context.Context, *DeleteOneRequest) (*DeletedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTopic not implemented")
}
func (UnimplementedPostServiceServer) DeleteTopics(context.Context, *DeleteManyRequest) (*DeletedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTopics not implemented")
}
func (UnimplementedPostServiceServer) PermanentlyDeleteTopic(context.Context, *PermanentlyDeleteOneRequest) (*DeletedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PermanentlyDeleteTopic not implemented")
}
func (UnimplementedPostServiceServer) PermanentlyDeleteTopics(context.Context, *PermanentlyDeleteManyRequest) (*DeletedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PermanentlyDeleteTopics not implemented")
}
func (UnimplementedPostServiceServer) RestoreTopic(context.Context, *RestoreOneRequest) (*RestoredResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreTopic not implemented")
}
func (UnimplementedPostServiceServer) RestoreTopics(context.Context, *RestoreManyRequest) (*RestoredResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreTopics not implemented")
}
func (UnimplementedPostServiceServer) CreatePost(context.Context, *CreatePostRequest) (*CreatedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePost not implemented")
}
func (UnimplementedPostServiceServer) GetDeletedTopics(context.Context, *GetAllRequest) (*TopicsAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeletedTopics not implemented")
}
func (UnimplementedPostServiceServer) GetAllTopics(context.Context, *GetAllRequest) (*TopicsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTopics not implemented")
}
func (UnimplementedPostServiceServer) GetAllPostsAdmin(context.Context, *GetAllPostsAdminRequest) (*PostsAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllPostsAdmin not implemented")
}
func (UnimplementedPostServiceServer) GetPostById(context.Context, *GetOneRequest) (*PostAdminDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPostById not implemented")
}
func (UnimplementedPostServiceServer) UpdatePost(context.Context, *UpdatePostRequest) (*PostAdminDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePost not implemented")
}
func (UnimplementedPostServiceServer) DeletePost(context.Context, *DeleteOneRequest) (*DeletedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePost not implemented")
}
func (UnimplementedPostServiceServer) DeletePosts(context.Context, *DeleteManyRequest) (*DeletedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePosts not implemented")
}
func (UnimplementedPostServiceServer) RestorePost(context.Context, *RestoreOneRequest) (*RestoredResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestorePost not implemented")
}
func (UnimplementedPostServiceServer) RestorePosts(context.Context, *RestoreManyRequest) (*RestoredResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestorePosts not implemented")
}
func (UnimplementedPostServiceServer) PermanentlyDeletePost(context.Context, *PermanentlyDeleteOneRequest) (*DeletedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PermanentlyDeletePost not implemented")
}
func (UnimplementedPostServiceServer) PermanentlyDeletePosts(context.Context, *PermanentlyDeleteManyRequest) (*DeletedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PermanentlyDeletePosts not implemented")
}
func (UnimplementedPostServiceServer) GetDeletedPosts(context.Context, *GetAllPostsAdminRequest) (*PostsAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeletedPosts not implemented")
}
func (UnimplementedPostServiceServer) GetDeletedPostById(context.Context, *GetOneRequest) (*PostAdminDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeletedPostById not implemented")
}
func (UnimplementedPostServiceServer) GetPostContentById(context.Context, *GetOneRequest) (*PostContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPostContentById not implemented")
}
func (UnimplementedPostServiceServer) mustEmbedUnimplementedPostServiceServer() {}
func (UnimplementedPostServiceServer) testEmbeddedByValue()                     {}

// UnsafePostServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PostServiceServer will
// result in compilation errors.
type UnsafePostServiceServer interface {
	mustEmbedUnimplementedPostServiceServer()
}

func RegisterPostServiceServer(s grpc.ServiceRegistrar, srv PostServiceServer) {
	// If the following call pancis, it indicates UnimplementedPostServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PostService_ServiceDesc, srv)
}

func _PostService_CreateTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).CreateTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_CreateTopic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).CreateTopic(ctx, req.(*CreateTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_GetAllTopicsAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).GetAllTopicsAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_GetAllTopicsAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).GetAllTopicsAdmin(ctx, req.(*GetAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_UpdateTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).UpdateTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_UpdateTopic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).UpdateTopic(ctx, req.(*UpdateTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_DeleteTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).DeleteTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_DeleteTopic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).DeleteTopic(ctx, req.(*DeleteOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_DeleteTopics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteManyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).DeleteTopics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_DeleteTopics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).DeleteTopics(ctx, req.(*DeleteManyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_PermanentlyDeleteTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermanentlyDeleteOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).PermanentlyDeleteTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_PermanentlyDeleteTopic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).PermanentlyDeleteTopic(ctx, req.(*PermanentlyDeleteOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_PermanentlyDeleteTopics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermanentlyDeleteManyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).PermanentlyDeleteTopics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_PermanentlyDeleteTopics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).PermanentlyDeleteTopics(ctx, req.(*PermanentlyDeleteManyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_RestoreTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestoreOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).RestoreTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_RestoreTopic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).RestoreTopic(ctx, req.(*RestoreOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_RestoreTopics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestoreManyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).RestoreTopics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_RestoreTopics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).RestoreTopics(ctx, req.(*RestoreManyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_CreatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).CreatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_CreatePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).CreatePost(ctx, req.(*CreatePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_GetDeletedTopics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).GetDeletedTopics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_GetDeletedTopics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).GetDeletedTopics(ctx, req.(*GetAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_GetAllTopics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).GetAllTopics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_GetAllTopics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).GetAllTopics(ctx, req.(*GetAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_GetAllPostsAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllPostsAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).GetAllPostsAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_GetAllPostsAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).GetAllPostsAdmin(ctx, req.(*GetAllPostsAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_GetPostById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).GetPostById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_GetPostById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).GetPostById(ctx, req.(*GetOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_UpdatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).UpdatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_UpdatePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).UpdatePost(ctx, req.(*UpdatePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_DeletePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).DeletePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_DeletePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).DeletePost(ctx, req.(*DeleteOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_DeletePosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteManyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).DeletePosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_DeletePosts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).DeletePosts(ctx, req.(*DeleteManyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_RestorePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestoreOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).RestorePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_RestorePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).RestorePost(ctx, req.(*RestoreOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_RestorePosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestoreManyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).RestorePosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_RestorePosts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).RestorePosts(ctx, req.(*RestoreManyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_PermanentlyDeletePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermanentlyDeleteOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).PermanentlyDeletePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_PermanentlyDeletePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).PermanentlyDeletePost(ctx, req.(*PermanentlyDeleteOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_PermanentlyDeletePosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermanentlyDeleteManyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).PermanentlyDeletePosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_PermanentlyDeletePosts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).PermanentlyDeletePosts(ctx, req.(*PermanentlyDeleteManyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_GetDeletedPosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllPostsAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).GetDeletedPosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_GetDeletedPosts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).GetDeletedPosts(ctx, req.(*GetAllPostsAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_GetDeletedPostById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).GetDeletedPostById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_GetDeletedPostById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).GetDeletedPostById(ctx, req.(*GetOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_GetPostContentById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).GetPostContentById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_GetPostContentById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).GetPostContentById(ctx, req.(*GetOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PostService_ServiceDesc is the grpc.ServiceDesc for PostService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PostService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "post.PostService",
	HandlerType: (*PostServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTopic",
			Handler:    _PostService_CreateTopic_Handler,
		},
		{
			MethodName: "GetAllTopicsAdmin",
			Handler:    _PostService_GetAllTopicsAdmin_Handler,
		},
		{
			MethodName: "UpdateTopic",
			Handler:    _PostService_UpdateTopic_Handler,
		},
		{
			MethodName: "DeleteTopic",
			Handler:    _PostService_DeleteTopic_Handler,
		},
		{
			MethodName: "DeleteTopics",
			Handler:    _PostService_DeleteTopics_Handler,
		},
		{
			MethodName: "PermanentlyDeleteTopic",
			Handler:    _PostService_PermanentlyDeleteTopic_Handler,
		},
		{
			MethodName: "PermanentlyDeleteTopics",
			Handler:    _PostService_PermanentlyDeleteTopics_Handler,
		},
		{
			MethodName: "RestoreTopic",
			Handler:    _PostService_RestoreTopic_Handler,
		},
		{
			MethodName: "RestoreTopics",
			Handler:    _PostService_RestoreTopics_Handler,
		},
		{
			MethodName: "CreatePost",
			Handler:    _PostService_CreatePost_Handler,
		},
		{
			MethodName: "GetDeletedTopics",
			Handler:    _PostService_GetDeletedTopics_Handler,
		},
		{
			MethodName: "GetAllTopics",
			Handler:    _PostService_GetAllTopics_Handler,
		},
		{
			MethodName: "GetAllPostsAdmin",
			Handler:    _PostService_GetAllPostsAdmin_Handler,
		},
		{
			MethodName: "GetPostById",
			Handler:    _PostService_GetPostById_Handler,
		},
		{
			MethodName: "UpdatePost",
			Handler:    _PostService_UpdatePost_Handler,
		},
		{
			MethodName: "DeletePost",
			Handler:    _PostService_DeletePost_Handler,
		},
		{
			MethodName: "DeletePosts",
			Handler:    _PostService_DeletePosts_Handler,
		},
		{
			MethodName: "RestorePost",
			Handler:    _PostService_RestorePost_Handler,
		},
		{
			MethodName: "RestorePosts",
			Handler:    _PostService_RestorePosts_Handler,
		},
		{
			MethodName: "PermanentlyDeletePost",
			Handler:    _PostService_PermanentlyDeletePost_Handler,
		},
		{
			MethodName: "PermanentlyDeletePosts",
			Handler:    _PostService_PermanentlyDeletePosts_Handler,
		},
		{
			MethodName: "GetDeletedPosts",
			Handler:    _PostService_GetDeletedPosts_Handler,
		},
		{
			MethodName: "GetDeletedPostById",
			Handler:    _PostService_GetDeletedPostById_Handler,
		},
		{
			MethodName: "GetPostContentById",
			Handler:    _PostService_GetPostContentById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/post.proto",
}
